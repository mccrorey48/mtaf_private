When running Python "behave" test features using run_features.py,
the JSON test result output of the Python "behave" module is inspected
to calculate test step results. These results are saved in a MongoDB database
where they can be viewed by the report_spa application.

In the JSON test result output, test steps have the "result" attribute only
if they were actually run. Test steps will be listed in the JSON test result
output whether they are run or not, but test steps with no "result" attribute
are classified as "skipped" by run_features.py. Test steps are skipped for these
reasons:

    - if a test step fails, the remaining steps in the scenario are skipped
    - if a scenario fails, and run_features.py is invoked with the "--stop" (or
      its equivalent, "-x") argument, all test steps in subsequent features and
    - if run_features.py is run with a tag, using the "--run_tags" (or its
      equivalent, "-r") argument followed by a comma-separated list of tags,
      only scenarios prepended with one of the tags (with the '@' character
      prefix) will run; other scenarios will be skipped

A scenario that has no test steps will not be run by the "behave" module, and
therefore would not be found in the test results report. However, a scenario
may have steps implemented with Python code that doesn't actually
do anything (consisting of "pass" and/or calls to substeps that don't do
anything). These steps are detected by run_features.py and assigned "fake"
result status.

For tests that have substeps, run_features.py performs a post-processing step
that inspects the status of the substeps, modifying the test step result status
as required.

Possible test step result status values include:

  fake:       the Python implementation of a test step doesn't do anything (just
              contains "pass" or substeps that are fake, and possibly some
              comment lines)
  incomplete: partly implemented and run without failure, but has fake substeps
  skipped:    the step was not executed, for one of the reasons mentioned above
  failed:     any step or substep failed
  passed:     step was run, was not fake, and had no failures

step status is calculated according to this pseudocode:

if step has no "result" attribute:
    status = "skipped"
else if step["result"] is "failed":
    status = "failed"
else if step is fake:
    status = "fake"
else if step has no substeps:
    status = "passed"
else if any substep failed:
    status = "failed"
else if no substeps is are fake:
    status = "passed"
else if no substeps passed:
    status = "fake"
else:
    status = "incomplete"

scenario status after considering steps,
or feature status after considering scenarios:

if has_fails:
    status = failed
else:
    if all steps passed:
        status = passed
    elif all steps skipped:
        status = skipped
    elif all steps fake:
        status = fake
    elif any step fake or incomplete or skipped:
        status = incomplete



