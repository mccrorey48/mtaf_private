The "features" directory contains feature files (*.feature). These each contain one feature, which
can contain multiple scenarios, which can contain multiple steps.

Steps start with one of the keywords "Given", "When", "Then", "And", or "But" (case sensitive).

The text after the keyword is used to look up the step implementation in the python code.  The python
"behave" framework looks for step implementations in all of the python (*.py) files in the "steps" subdirectory
of the features directory.

Two or more distinct activities might suggest the same step name; for example, "click OK" could apply to
many different popup windows that might require different implementations. To avoid this confusion in naming steps,
there are separate python files for each "view" seen in the application under test.

However, "behave" lumps together the implementations from all of the python files.  So to keep the step names
separate, we start each step name with a view name like this:

Feature <feature name>
    Scenario <scenario name>
        @Given [<view name>] <step name>

Then the step implementation code is placed in the <view name>.py file.

Step implementation can be automatically generated by PyCharm by clicking on the step name and typing Alt-<Enter>.
In this case, the implementation looks like this, using the above "Given" example:

@Given("[<view name>] <step name>")
def step_impl(context):
    """ some boilerplate comments """
    pass

There is a utility program in mtaf/lib calles sort_steps.py that will sort the step implementations and rename
the functions by converting the step name to lowercase, changing spaces to underscores, and removing characters
that are illegal in Python functin names.